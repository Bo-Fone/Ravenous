{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","e","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderBySortOptions","placeholder","onChange","Yelp","search","a","async","fetch","headers","Authorization","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","console","log","errors","error","error_code","error_message","more_info","App","then","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a52dbb4.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className='Business'>\n                <div className='image-container'>\n                    <img\n                        src={this.props.business.imageSrc}\n                        alt='A pizza product from Ravenous.'\n                    />\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className='Business-information'>\n                    <div className='Business-address'>\n                        <p>{this.props.business.address}</p>\n                        <p>{this.props.business.city}</p>\n                        <p>\n                            {this.props.business.state}{' '}\n                            {this.props.business.zipCode}\n                        </p>\n                    </div>\n                    <div className='Business-reviews'>\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className='rating'>{this.props.business.rating}</h3>\n                        <p>{this.props.business.reviewCount}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className='BusinessList'>\n                {this.props.businesses.map(business => {\n                    return (\n                        <Business\n                            business={business}\n                            key={business.id ? business.id : 'defaultKey'}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match',\n        };\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count',\n        };\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n    getSortByClass(sortByOption) {\n        return sortByOption === this.state.sortBy ? 'active' : '';\n    }\n    handleSortByChange(sortByOption) {\n        this.setState({ sortBy: sortByOption });\n    }\n    handleTermChange(e) {\n        this.setState({ term: e.target.value });\n    }\n    handleLocationChange(e) {\n        this.setState({ location: e.target.value });\n    }\n    handleSearch(e) {\n        this.props.searchYelp(\n            this.state.term,\n            this.state.location,\n            this.state.sortBy,\n        );\n        e.preventDefault();\n    }\n    renderBySortOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return (\n                <li\n                    className={this.getSortByClass(sortByOptionValue)}\n                    onClick={this.handleSortByChange.bind(\n                        this,\n                        sortByOptionValue,\n                    )}\n                >\n                    {sortByOption}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className='SearchBar'>\n                <div className='SearchBar-sort-options'>\n                    <ul>{this.renderBySortOptions()}</ul>\n                </div>\n                <div className='SearchBar-fields'>\n                    <input\n                        placeholder='Search Businesses'\n                        onChange={this.handleTermChange}\n                    />\n                    <input\n                        placeholder='Where?'\n                        onChange={this.handleLocationChange}\n                    />\n                </div>\n                <div className='SearchBar-submit'>\n                    <button onClick={this.handleSearch}>Let's Go</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","const apiKey =\n    'vdaFcXdaZyENXNg_ctZFpMZoGWmYGNdfLc_FmsL6-3zrl7vDlNSQg7ekjgSS5fnUOIEClcVd0MN-jVT1k_Lg5gur41BEEPLMF5tLlLDFkcTWDTMxDfoGUUmLyuLzXXYx';\n\nconst Yelp = {\n    search: async function(term, location, sortBy) {\n        const response = await fetch(\n            `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n            {\n                headers: { Authorization: `Bearer ${apiKey}` },\n            },\n        );\n        const jsonResponse = await response.json();\n        if (jsonResponse.businesses) {\n            return jsonResponse.businesses.map(business => {\n                return {\n                    id: business.id,\n                    imageSrc: business.image_url,\n                    name: business.name,\n                    address: business.location.address1,\n                    city: business.location.city,\n                    state: business.location.state,\n                    zipCode: business.location.zip_code,\n                    category: business.categories[0].title,\n                    rating: business.rating,\n                    reviewCount: business.review_count,\n                };\n            });\n        } else {\n            console.log(\n                jsonResponse.errors.map(error => {\n                    return `${error.error_code} \\n ${error.error_message} \\n ${error.more_info}`;\n                }),\n            );\n        }\n    },\n};\n\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n// var business = {\n//     imageSrc:\n//         'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n//     name: 'MarginOtto Pizzeria',\n//     address: '1010 Paddington Way',\n//     city: 'Flavortown',\n//     state: 'NY',\n//     zipCode: '10101',\n//     category: 'Italian',\n//     rating: 4.5,\n//     reviewCount: 90,\n// };\n\n// const businesses = [business, business, business, business, business, business];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { businesses: [] };\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n    searchYelp(term, location, sortBy) {\n        Yelp.search(term, location, sortBy).then(businesses => {\n            this.setState({ businesses: businesses });\n        });\n    }\n    render() {\n        return (\n            <div className='App'>\n                <h1>ravenous</h1>\n                <SearchBar searchYelp={this.searchYelp} />\n                <BusinessList businesses={this.state.businesses} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}